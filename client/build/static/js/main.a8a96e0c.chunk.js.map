{"version":3,"sources":["images/sun.png","components/SearchForm.js","components/ResultMessage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchForm","props","handleUnitChange","e","setState","units","target","value","symbol","id","handleSubmit","a","preventDefault","fetch","method","headers","body","JSON","stringify","city","state","response","json","status","Error","message","cityName","temperature","description","error","onSearchComplete","handleChange","bind","this","onSubmit","className","onChange","type","name","defaultChecked","htmlFor","Component","ResultMessage","undefined","App","handleSearch","src","SunIcon","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8a96e0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sun.7908f147.png\";","import React, {Component} from 'react';\n\nclass SearchForm extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            city: '',            \n            temperature: '',\n            units: 'metric',\n            symbol: 'C',\n            error: ''\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleUnitChange = this.handleUnitChange.bind(this);\n    }\n\n    // handles change in input box\n    handleChange(e) {\n        this.setState({ \n          city: e.target.value\n        });\n    }\n\n    // handles change in radio buttons for imperial or metric\n    handleUnitChange = (e) => {\n        this.setState({\n            units: e.target.value,\n            symbol: e.target.id,\n        })\n    }\n\n    // handles form submission\n    handleSubmit = async e => {\n        e.preventDefault();\n        const response = await fetch('/weather', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ \n                city: this.state.city,\n                units: this.state.units\n            }),\n        });\n        \n        const body = await response.json();\n\n        if (response.status !== 200) throw Error(body.message);\n        \n        this.setState({ \n            cityName: body.city,\n            temperature: body.temperature,\n            description: body.description,\n            message: `The temperature in ${body.city} is ${body.temperature}°${this.state.symbol}`,\n            error: body.error\n        });\n\n        // pass the result back to the app\n        this.props.onSearchComplete(this.state.cityName, this.state.temperature, this.state.units, this.state.symbol, this.state.description, this.state.error);\n    };\n\n    render () {\n        return (\n            <form onSubmit={this.handleSubmit} className=\"form\">\n                <input\n                    onChange={this.handleChange}\n                    type=\"text\"\n                    value={this.state.city}\n                    id=\"city\"                   \n                />\n                \n                <div onChange={this.handleUnitChange}>\n                    <input \n                        type=\"radio\" \n                        name=\"units\" \n                        value=\"metric\" \n                        id=\"C\"\n                        defaultChecked\n                    />\n                    <label \n                        htmlFor=\"celcius\">Celcius\n                    </label>\n                    <input \n                        type=\"radio\" \n                        name=\"units\" \n                        value=\"imperial\" \n                        id=\"F\" \n                    />\n                    <label \n                        htmlFor=\"fahrenheit\">Fahrenheit\n                    </label>                            \n                </div>\n                <button type=\"submit\">SUBMIT</button>\n            </form>\n        )\n    }\n}\n\nexport default SearchForm;","import React from 'react';\n\nfunction ResultMessage(props){\n    return (\n        <div>\n            {/* if no error message exists then display the weather message */}\n            { props.error === undefined &&\n                <div className=\"result\">\n                    <h2>{props.description}</h2>                    \n                    <p>{props.message}</p>     \n                </div>\n            }\n\n            {/* if error exists then display it */}\n            { props.error !== undefined && \n                <div className=\"result\">\n                    <p>{props.error}</p>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ResultMessage;","import React, {Component} from 'react';\nimport './styles/App.scss';\nimport SunIcon from './images/sun.png';\nimport SearchForm from './components/SearchForm';\nimport ResultMessage from './components/ResultMessage';\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            city: '',\n            cityName: '',\n            temperature: '',\n            units: '',\n            symbol: '',\n            description: '',\n            message: '',\n            error: undefined,            \n        }        \n        this.handleSearch = this.handleSearch.bind(this);\n    }\n\n    // handles the API response\n    handleSearch(cityName, temperature, units, symbol, description, error) {\n        this.setState({\n            cityName: cityName,\n            temperature: temperature,\n            units: units,\n            symbol: symbol,\n            description: description,\n            error: error,\n            message: `The temperature in ${cityName} is ${temperature}°${symbol}`,\n        });\n    }\n\n    render () {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={SunIcon} alt=\"sun icon\" className=\"sun\" />\n                    <h1 className=\"app-title\">Check the weather</h1>\n                    \n                    {/* the weather result or error message */}\n                    <ResultMessage \n                        description={this.state.description}\n                        message={this.state.message}\n                        error={this.state.error}\n                    />\n                    \n                    {/* the city input form */}\n                    <SearchForm \n                        onSearchComplete={this.handleSearch}\n                    />\n\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}